<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Wed Aug 22 18:32:10 2018
<BR><P>
<H3>Maximum Stack Usage =        164 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
USB_LP_CAN1_RX0_IRQHandler &rArr; USB_Istr &rArr; CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[72]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">SysTick_Handler</a><BR>
 <LI><a href="#[2f]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2f]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[55]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[56]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[57]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[58]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">EP1_IN_Callback</a> from usb_endp.o(i.EP1_IN_Callback) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[6]">EP3_OUT_Callback</a> from usb_endp.o(i.EP3_OUT_Callback) referenced 2 times from usb_istr.o(.data)
 <LI><a href="#[23]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">NOP_Process</a> from usb_core.o(i.NOP_Process) referenced 38 times from usb_istr.o(.data)
 <LI><a href="#[1e]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">PendSV_Handler</a> from stm32f10x_it.o(i.PendSV_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5b]">Standard_GetConfiguration</a> from usb_core.o(i.Standard_GetConfiguration) referenced from usb_core.o(i.Data_Setup0)
 <LI><a href="#[5c]">Standard_GetInterface</a> from usb_core.o(i.Standard_GetInterface) referenced from usb_core.o(i.Data_Setup0)
 <LI><a href="#[5a]">Standard_GetStatus</a> from usb_core.o(i.Standard_GetStatus) referenced from usb_core.o(i.Data_Setup0)
 <LI><a href="#[1c]">SysTick_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4f]">TIM5_IRQHandler</a> from clk.o(i.TIM5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[53]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[54]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[52]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">USART1_IRQHandler</a> from usart_com.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">USBWakeUp_IRQHandler</a> from hw_config.o(i.USBWakeUp_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USB_LP_CAN1_RX0_IRQHandler</a> from hw_config.o(i.USB_LP_CAN1_RX0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">Virtual_Com_Port_Data_Setup</a> from usb_prop.o(i.Virtual_Com_Port_Data_Setup) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[f]">Virtual_Com_Port_GetConfigDescriptor</a> from usb_prop.o(i.Virtual_Com_Port_GetConfigDescriptor) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[e]">Virtual_Com_Port_GetDeviceDescriptor</a> from usb_prop.o(i.Virtual_Com_Port_GetDeviceDescriptor) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[5d]">Virtual_Com_Port_GetLineCoding</a> from usb_prop.o(i.Virtual_Com_Port_GetLineCoding) referenced from usb_prop.o(i.Virtual_Com_Port_Data_Setup)
 <LI><a href="#[10]">Virtual_Com_Port_GetStringDescriptor</a> from usb_prop.o(i.Virtual_Com_Port_GetStringDescriptor) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[d]">Virtual_Com_Port_Get_Interface_Setting</a> from usb_prop.o(i.Virtual_Com_Port_Get_Interface_Setting) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[c]">Virtual_Com_Port_NoData_Setup</a> from usb_prop.o(i.Virtual_Com_Port_NoData_Setup) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[8]">Virtual_Com_Port_Reset</a> from usb_prop.o(i.Virtual_Com_Port_Reset) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[11]">Virtual_Com_Port_SetConfiguration</a> from usb_prop.o(i.Virtual_Com_Port_SetConfiguration) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[12]">Virtual_Com_Port_SetDeviceAddress</a> from usb_prop.o(i.Virtual_Com_Port_SetDeviceAddress) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[5e]">Virtual_Com_Port_SetLineCoding</a> from usb_prop.o(i.Virtual_Com_Port_SetLineCoding) referenced from usb_prop.o(i.Virtual_Com_Port_Data_Setup)
 <LI><a href="#[9]">Virtual_Com_Port_Status_In</a> from usb_prop.o(i.Virtual_Com_Port_Status_In) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[a]">Virtual_Com_Port_Status_Out</a> from usb_prop.o(i.Virtual_Com_Port_Status_Out) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[7]">Virtual_Com_Port_init</a> from usb_prop.o(i.Virtual_Com_Port_init) referenced 2 times from usb_prop.o(.data)
 <LI><a href="#[1d]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5f]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5f]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[60]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[62]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[190]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[191]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[192]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[193]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[194]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[66]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[195]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[196]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[197]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[198]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[199]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[19a]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[19b]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[19c]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[19d]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[19e]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[19f]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1a0]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1a1]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1a2]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1a3]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1a4]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1a5]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1a6]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1a7]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1a8]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1a9]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[6b]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1aa]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1ab]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1ac]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1ad]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1ae]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1af]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1b0]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[61]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1b1]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[63]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[65]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1b2]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[67]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Process_switch &rArr; PC_OPTION_PROG &rArr; online_write_data &rArr; mov_flash &rArr; write_block &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1b3]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[73]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[6a]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1b4]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[6c]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[13]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1b5]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[70]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[1b8]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1bb]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[69]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[6d]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1bc]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[1be]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[f1]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[ef]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetResetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[ea]"></a>ADC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f10x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[eb]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f10x_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[ee]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_ResetCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[f2]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[f0]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[74]"></a>ADC_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, adc.o(i.ADC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ADC_init &rArr; RCC_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_out_init
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d2]"></a>AND</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ladder.o(i.AND))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AND
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_ProComParse
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_AND_M
</UL>

<P><STRONG><a name="[77]"></a>BSP_config</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, bsp.o(i.BSP_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_xy
</UL>

<P><STRONG><a name="[17]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10a]"></a>ByteSwap</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_regs.o(i.ByteSwap))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[7f]"></a>CTR_LP</STRONG> (Thumb, 616 bytes, Stack size 8 bytes, usb_int.o(i.CTR_LP))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[10d]"></a>ClearDTOG_RX</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usb_regs.o(i.ClearDTOG_RX))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>

<P><STRONG><a name="[10b]"></a>ClearDTOG_TX</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usb_regs.o(i.ClearDTOG_TX))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>

<P><STRONG><a name="[136]"></a>Clear_Status_Out</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usb_regs.o(i.Clear_Status_Out))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[8f]"></a>DAC_Cmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_dac.o(i.DAC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_out_init
</UL>

<P><STRONG><a name="[8e]"></a>DAC_Init</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, stm32f10x_dac.o(i.DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DAC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_out_init
</UL>

<P><STRONG><a name="[8a]"></a>DAC_SetChannel1Data</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f10x_dac.o(i.DAC_SetChannel1Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAC_SetChannel1Data
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_out_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_data
</UL>

<P><STRONG><a name="[8b]"></a>DAC_SetChannel2Data</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f10x_dac.o(i.DAC_SetChannel2Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAC_SetChannel2Data
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_out_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_data
</UL>

<P><STRONG><a name="[8c]"></a>DAC_SoftwareTriggerCmd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_dac.o(i.DAC_SoftwareTriggerCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DAC_SoftwareTriggerCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_out_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_data
</UL>

<P><STRONG><a name="[89]"></a>DAC_data</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dac.o(i.DAC_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DAC_data &rArr; DAC_SoftwareTriggerCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SoftwareTriggerCmd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetChannel2Data
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetChannel1Data
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[76]"></a>DAC_out_init</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, dac.o(i.DAC_out_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DAC_out_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SoftwareTriggerCmd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetChannel2Data
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_SetChannel1Data
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
</UL>

<P><STRONG><a name="[e9]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[e7]"></a>DMA_DeInit</STRONG> (Thumb, 322 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[e8]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[1a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>EP1_IN_Callback</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, usb_endp.o(i.EP1_IN_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = EP1_IN_Callback &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxValid
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOF_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>EP3_OUT_Callback</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usb_endp.o(i.EP3_OUT_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EP3_OUT_Callback &rArr; USB_To_USART_Send_Data &rArr; RX_Process &rArr; rx_data_sum
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_To_USART_Send_Data
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxValid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_istr.o(.data)
</UL>
<P><STRONG><a name="[b9]"></a>EPC_FORCE_OFF</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, usart_com.o(i.EPC_FORCE_OFF))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_OPTION_PROG
</UL>

<P><STRONG><a name="[b8]"></a>EPC_FORCE_ON</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, usart_com.o(i.EPC_FORCE_ON))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_OPTION_PROG
</UL>

<P><STRONG><a name="[12b]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Interrupts_Config
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBWakeUp_IRQHandler
</UL>

<P><STRONG><a name="[12d]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Interrupts_Config
</UL>

<P><STRONG><a name="[110]"></a>Enter_LowPowerMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hw_config.o(i.Enter_LowPowerMode))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suspend
</UL>

<P><STRONG><a name="[9f]"></a>FLASH_ErasePage</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, stm32f10x_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_block
</UL>

<P><STRONG><a name="[a2]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_GetBank1Status))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[140]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_block
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_flash_lock
</UL>

<P><STRONG><a name="[a1]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f10x_flash.o(i.FLASH_ProgramHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_block
</UL>

<P><STRONG><a name="[18d]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_block
</UL>

<P><STRONG><a name="[a0]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[79]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_out_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_config
</UL>

<P><STRONG><a name="[98]"></a>GetEPRxAddr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPRxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
</UL>

<P><STRONG><a name="[130]"></a>GetEPRxCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
</UL>

<P><STRONG><a name="[94]"></a>GetEPTxAddr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_regs.o(i.GetEPTxAddr))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>

<P><STRONG><a name="[a3]"></a>Get_SerialNum</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hw_config.o(i.Get_SerialNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_init
</UL>

<P><STRONG><a name="[15]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>In0_Process</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, usb_core.o(i.In0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = In0_Process &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceAddress
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[a4]"></a>IntToUnicode</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, hw_config.o(i.IntToUnicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
</UL>

<P><STRONG><a name="[ff]"></a>Leave_LowPowerMode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hw_config.o(i.Leave_LowPowerMode))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_Init
</UL>

<P><STRONG><a name="[aa]"></a>MYRCC_DeInit</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, sys.o(i.MYRCC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MYRCC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MY_NVIC_SetVectorTable
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
</UL>

<P><STRONG><a name="[ab]"></a>MY_NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys.o(i.MY_NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYRCC_DeInit
</UL>

<P><STRONG><a name="[16]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NOP_Process</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_core.o(i.NOP_Process))
<BR>[Address Reference Count : 2]<UL><LI> usb_istr.o(.data)
<LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[ad]"></a>NVIC_Configuration</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, irq.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Interrupts_Config
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[af]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[ae]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[82]"></a>Out0_Process</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usb_core.o(i.Out0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Out0_Process &rArr; DataStageOut &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[e5]"></a>PC_FORCE_OFF</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, usart_com.o(i.PC_FORCE_OFF))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_switch
</UL>

<P><STRONG><a name="[e4]"></a>PC_FORCE_ON</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, usart_com.o(i.PC_FORCE_ON))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_switch
</UL>

<P><STRONG><a name="[b7]"></a>PC_OPTION_PROG</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, usart_com.o(i.PC_OPTION_PROG))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = PC_OPTION_PROG &rArr; online_write_data &rArr; mov_flash &rArr; write_block &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_LH
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;online_write_data
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_data_address
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_flash_unlock
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_flash_lock
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_WRITE_Parameter
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_WRITE_PORG
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_READ_Parameter
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_READ_PORG
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPC_FORCE_ON
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPC_FORCE_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_switch
</UL>

<P><STRONG><a name="[bd]"></a>PC_READ_PORG</STRONG> (Thumb, 336 bytes, Stack size 12 bytes, usart_com.o(i.PC_READ_PORG))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PC_READ_PORG
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_OPTION_PROG
</UL>

<P><STRONG><a name="[bb]"></a>PC_READ_Parameter</STRONG> (Thumb, 786 bytes, Stack size 36 bytes, usart_com.o(i.PC_READ_Parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PC_READ_Parameter
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_OPTION_PROG
</UL>

<P><STRONG><a name="[c3]"></a>PC_READ_byte</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, usart_com.o(i.PC_READ_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PC_READ_byte &rArr; read_plc_tyte
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_plc_tyte
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_other_data
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_switch
</UL>

<P><STRONG><a name="[be]"></a>PC_WRITE_PORG</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, usart_com.o(i.PC_WRITE_PORG))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PC_WRITE_PORG &rArr; write_block &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_block
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backup_block
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_OPTION_PROG
</UL>

<P><STRONG><a name="[bc]"></a>PC_WRITE_Parameter</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, usart_com.o(i.PC_WRITE_Parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PC_WRITE_Parameter &rArr; write_block &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_block
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backup_block
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_OPTION_PROG
</UL>

<P><STRONG><a name="[e1]"></a>PC_WRITE_byte</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, usart_com.o(i.PC_WRITE_byte))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_switch
</UL>

<P><STRONG><a name="[c8]"></a>PLC_ProComParse</STRONG> (Thumb, 4324 bytes, Stack size 24 bytes, ladder.o(i.PLC_ProComParse))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = PLC_ProComParse &rArr; extend_function &rArr; SQR &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;force_set
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;force_reset
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_T_D_C_M_data
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_toend
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_p
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_Y
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AND
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;other_function
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operation_T
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operation_C
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUT
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ORI
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OR
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDI
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIT_SET
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANI
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>PMAToUserBufferCopy</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, usb_mem.o(i.PMAToUserBufferCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PMAToUserBufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Read
</UL>

<P><STRONG><a name="[1b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>Post0_Process</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usb_core.o(i.Post0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Post0_Process &rArr; SetEPRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
</UL>

<P><STRONG><a name="[dd]"></a>PowerOn</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usb_pwr.o(i.PowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PowerOn
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Cable_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_init
</UL>

<P><STRONG><a name="[df]"></a>Process_switch</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, usart_com.o(i.Process_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Process_switch &rArr; PC_OPTION_PROG &rArr; online_write_data &rArr; mov_flash &rArr; write_block &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_read_data
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_HL
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_end
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_flash_lock
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_WRITE_byte
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_READ_byte
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_OPTION_PROG
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_FORCE_ON
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_FORCE_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[8d]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_out_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
</UL>

<P><STRONG><a name="[78]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_out_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Port_Set
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_config
</UL>

<P><STRONG><a name="[75]"></a>RCC_Configuration</STRONG> (Thumb, 254 bytes, Stack size 72 bytes, adc.o(i.RCC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RCC_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
</UL>

<P><STRONG><a name="[109]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_USBCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
</UL>

<P><STRONG><a name="[db]"></a>RST_T_D_C_M_data</STRONG> (Thumb, 192 bytes, Stack size 0 bytes, usart_com.o(i.RST_T_D_C_M_data))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_ProComParse
</UL>

<P><STRONG><a name="[c9]"></a>RST_Y</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ladder.o(i.RST_Y))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_ProComParse
</UL>

<P><STRONG><a name="[fb]"></a>RX_Process</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, usart_com.o(i.RX_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RX_Process &rArr; rx_data_sum
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_data_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_To_USART_Send_Data
</UL>

<P><STRONG><a name="[fd]"></a>Resume</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, usb_pwr.o(i.Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Resume &rArr; Resume_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[fe]"></a>Resume_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_pwr.o(i.Resume_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Resume_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Leave_LowPowerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume
</UL>

<P><STRONG><a name="[100]"></a>SOF_Callback</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usb_endp.o(i.SOF_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SOF_Callback &rArr; EP1_IN_Callback &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP1_IN_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[19]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[132]"></a>SetBTABLE</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_regs.o(i.SetBTABLE))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[a6]"></a>SetDeviceAddress</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, usb_core.o(i.SetDeviceAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetDeviceAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[134]"></a>SetEPRxAddr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPRxAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPRxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[dc]"></a>SetEPRxCount</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPRxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[137]"></a>SetEPRxStatus</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, usb_regs.o(i.SetEPRxStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetEPRxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[9e]"></a>SetEPRxValid</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPRxValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPRxValid
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP3_OUT_Callback
</UL>

<P><STRONG><a name="[135]"></a>SetEPTxAddr</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPTxAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPTxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[96]"></a>SetEPTxCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_regs.o(i.SetEPTxCount))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageOut
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP1_IN_Callback
</UL>

<P><STRONG><a name="[10c]"></a>SetEPTxStatus</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, usb_regs.o(i.SetEPTxStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetEPTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[9b]"></a>SetEPTxValid</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPTxValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPTxValid
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP1_IN_Callback
</UL>

<P><STRONG><a name="[133]"></a>SetEPType</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_regs.o(i.SetEPType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetEPType
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Reset
</UL>

<P><STRONG><a name="[108]"></a>Set_USBClock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hw_config.o(i.Set_USBClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_USBClock
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_USBCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>Setup0_Process</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, usb_core.o(i.Setup0_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteSwap
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post0_Process
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
</UL>

<P><STRONG><a name="[b4]"></a>Standard_ClearFeature</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, usb_core.o(i.Standard_ClearFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Standard_ClearFeature &rArr; SetEPTxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_TX
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDTOG_RX
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[5b]"></a>Standard_GetConfiguration</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetConfiguration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[131]"></a>Standard_GetDescriptorData</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetDescriptorData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetDescriptorData
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_GetStringDescriptor
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_GetDeviceDescriptor
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_GetConfigDescriptor
</UL>

<P><STRONG><a name="[5c]"></a>Standard_GetInterface</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[5a]"></a>Standard_GetStatus</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, usb_core.o(i.Standard_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_core.o(i.Data_Setup0)
</UL>
<P><STRONG><a name="[b2]"></a>Standard_SetConfiguration</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usb_core.o(i.Standard_SetConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetConfiguration
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[b3]"></a>Standard_SetDeviceFeature</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_core.o(i.Standard_SetDeviceFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetDeviceFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[b6]"></a>Standard_SetEndPointFeature</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, usb_core.o(i.Standard_SetEndPointFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Standard_SetEndPointFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[b5]"></a>Standard_SetInterface</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, usb_core.o(i.Standard_SetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Standard_SetInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NoData_Setup0
</UL>

<P><STRONG><a name="[10e]"></a>Stm32_Clock_Init</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, sys.o(i.Stm32_Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Stm32_Clock_Init &rArr; MYRCC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYRCC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10f]"></a>Suspend</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, usb_pwr.o(i.Suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_LowPowerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>

<P><STRONG><a name="[111]"></a>SystemInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[4f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 302 bytes, Stack size 8 bytes, clk.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM5_IRQHandler &rArr; force_set
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_filter
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;force_set
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;force_reset
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_H100MS
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_1MS
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_10MS
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_100MS
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11a]"></a>TIM5_Init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, clk.o(i.TIM5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM5_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[113]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Init
</UL>

<P><STRONG><a name="[11d]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Init
</UL>

<P><STRONG><a name="[112]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[11c]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Init
</UL>

<P><STRONG><a name="[11b]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Init
</UL>

<P><STRONG><a name="[11e]"></a>TX_Process</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usart_com.o(i.TX_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TX_Process
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[de]"></a>USB_Cable_Config</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hw_config.o(i.USB_Cable_Config))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
</UL>

<P><STRONG><a name="[18]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>Virtual_Com_Port_Status_Out</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_prop.o(i.Virtual_Com_Port_Status_Out))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[116]"></a>T_100MS</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, clk.o(i.T_100MS))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = T_100MS
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[115]"></a>T_10MS</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, clk.o(i.T_10MS))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = T_10MS
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[114]"></a>T_1MS</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, clk.o(i.T_1MS))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = T_1MS
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[117]"></a>T_H100MS</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, clk.o(i.T_H100MS))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = T_H100MS
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[42]"></a>USART1_IRQHandler</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, usart_com.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_IRQHandler &rArr; RX_Process &rArr; rx_data_sum
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_Process
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RX_Process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[129]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[126]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[138]"></a>USART_Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hw_config.o(i.USART_Config))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_Status_In
</UL>

<P><STRONG><a name="[128]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[125]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[12a]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[127]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[47]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hw_config.o(i.USBWakeUp_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBWakeUp_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[181]"></a>USB_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usb_init.o(i.USB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12c]"></a>USB_Interrupts_Config</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, hw_config.o(i.USB_Interrupts_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_Interrupts_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12e]"></a>USB_Istr</STRONG> (Thumb, 426 bytes, Stack size 40 bytes, usb_istr.o(i.USB_Istr))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USB_Istr &rArr; CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTR_LP
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Suspend
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Resume
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SOF_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_LP_CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[31]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, hw_config.o(i.USB_LP_CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = USB_LP_CAN1_RX0_IRQHandler &rArr; USB_Istr &rArr; CTR_LP &rArr; Setup0_Process &rArr; Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Istr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12f]"></a>USB_Port_Set</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, hw_config.o(i.USB_Port_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Port_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[139]"></a>USB_SIL_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_sil.o(i.USB_SIL_Init))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Virtual_Com_Port_init
</UL>

<P><STRONG><a name="[9c]"></a>USB_SIL_Read</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usb_sil.o(i.USB_SIL_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USB_SIL_Read &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMAToUserBufferCopy
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxAddr
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP3_OUT_Callback
</UL>

<P><STRONG><a name="[9d]"></a>USB_To_USART_Send_Data</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, hw_config.o(i.USB_To_USART_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_To_USART_Send_Data &rArr; RX_Process &rArr; rx_data_sum
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RX_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP3_OUT_Callback
</UL>

<P><STRONG><a name="[11f]"></a>USB_USART_SendData</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, hw_config.o(i.USB_USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_Process
</UL>

<P><STRONG><a name="[95]"></a>UserToPMABufferCopy</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, usb_mem.o(i.UserToPMABufferCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UserToPMABufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EP1_IN_Callback
</UL>

<P><STRONG><a name="[b]"></a>Virtual_Com_Port_Data_Setup</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, usb_prop.o(i.Virtual_Com_Port_Data_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Virtual_Com_Port_Data_Setup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>Virtual_Com_Port_GetConfigDescriptor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_prop.o(i.Virtual_Com_Port_GetConfigDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Virtual_Com_Port_GetConfigDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>Virtual_Com_Port_GetDeviceDescriptor</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usb_prop.o(i.Virtual_Com_Port_GetDeviceDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Virtual_Com_Port_GetDeviceDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>Virtual_Com_Port_GetLineCoding</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_prop.o(i.Virtual_Com_Port_GetLineCoding))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(i.Virtual_Com_Port_Data_Setup)
</UL>
<P><STRONG><a name="[10]"></a>Virtual_Com_Port_GetStringDescriptor</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usb_prop.o(i.Virtual_Com_Port_GetStringDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Virtual_Com_Port_GetStringDescriptor &rArr; Standard_GetDescriptorData
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_GetDescriptorData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>Virtual_Com_Port_Get_Interface_Setting</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usb_prop.o(i.Virtual_Com_Port_Get_Interface_Setting))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>Virtual_Com_Port_NoData_Setup</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usb_prop.o(i.Virtual_Com_Port_NoData_Setup))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>Virtual_Com_Port_Reset</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, usb_prop.o(i.Virtual_Com_Port_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Virtual_Com_Port_Reset &rArr; SetEPTxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxStatus
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxCount
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDeviceAddress
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPType
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxAddr
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxValid
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxStatus
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPRxAddr
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBTABLE
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Status_Out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>Virtual_Com_Port_SetConfiguration</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usb_prop.o(i.Virtual_Com_Port_SetConfiguration))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>Virtual_Com_Port_SetDeviceAddress</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_prop.o(i.Virtual_Com_Port_SetDeviceAddress))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>Virtual_Com_Port_SetLineCoding</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usb_prop.o(i.Virtual_Com_Port_SetLineCoding))
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(i.Virtual_Com_Port_Data_Setup)
</UL>
<P><STRONG><a name="[9]"></a>Virtual_Com_Port_Status_In</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usb_prop.o(i.Virtual_Com_Port_Status_In))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Virtual_Com_Port_Status_In
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>Virtual_Com_Port_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_prop.o(i.Virtual_Com_Port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Virtual_Com_Port_init &rArr; Get_SerialNum &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOn
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SerialNum
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SIL_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_prop.o(.data)
</UL>
<P><STRONG><a name="[c0]"></a>all_flash_lock</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usart_com.o(i.all_flash_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = all_flash_lock &rArr; write_block &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_block
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_switch
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_OPTION_PROG
</UL>

<P><STRONG><a name="[bf]"></a>all_flash_unlock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usart_com.o(i.all_flash_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_OPTION_PROG
</UL>

<P><STRONG><a name="[c7]"></a>backup_block</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usart_com.o(i.backup_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = backup_block
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;online_write_data
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mov_flash
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_WRITE_Parameter
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_WRITE_PORG
</UL>

<P><STRONG><a name="[144]"></a>backup_data</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, usart_com.o(i.backup_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = backup_data &rArr; write_data &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14f]"></a>data_init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, usart_com.o(i.data_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = data_init &rArr; recover_data &rArr; read_data
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recover_data
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[118]"></a>filter</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, adc.o(i.filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = filter
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[17d]"></a>find_data</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usart_com.o(i.find_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = find_data
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mov_flash
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_data_address
</UL>

<P><STRONG><a name="[c1]"></a>find_data_address</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, usart_com.o(i.find_data_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = find_data_address &rArr; find_data
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_data
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_OPTION_PROG
</UL>

<P><STRONG><a name="[e2]"></a>find_end</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usart_com.o(i.find_end))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_switch
</UL>

<P><STRONG><a name="[cc]"></a>find_p</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ladder.o(i.find_p))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = find_p
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_ProComParse
</UL>

<P><STRONG><a name="[154]"></a>find_step</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, ladder.o(i.find_step))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_SUBP
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_ORP
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_ORF
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_MULP
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_MOVP
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_LDP
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_LDF
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_INCP
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_DIVP
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_DECP
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_ANDP
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_ANDF
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_ADDP
</UL>

<P><STRONG><a name="[cd]"></a>find_toend</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ladder.o(i.find_toend))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_ProComParse
</UL>

<P><STRONG><a name="[cb]"></a>force_reset</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ladder.o(i.force_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = force_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_ProComParse
</UL>

<P><STRONG><a name="[ca]"></a>force_set</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ladder.o(i.force_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = force_set
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_ProComParse
</UL>

<P><STRONG><a name="[17e]"></a>init_xy</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp.o(i.init_xy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = init_xy &rArr; BSP_config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;y_refresh
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_config
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>main</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = main &rArr; Process_switch &rArr; PC_OPTION_PROG &rArr; online_write_data &rArr; mov_flash &rArr; write_block &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;y_refresh
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_refresh
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recover_data
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_xy
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backup_data
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Port_Set
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Interrupts_Config
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TX_Process
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stm32_Clock_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_USBClock
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_switch
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_ProComParse
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[183]"></a>mov_flash</STRONG> (Thumb, 444 bytes, Stack size 48 bytes, usart_com.o(i.mov_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mov_flash &rArr; write_block &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_block
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_data
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backup_block
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;online_write_data
</UL>

<P><STRONG><a name="[c2]"></a>online_write_data</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, usart_com.o(i.online_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = online_write_data &rArr; mov_flash &rArr; write_block &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_block
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mov_flash
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backup_block
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_OPTION_PROG
</UL>

<P><STRONG><a name="[18b]"></a>read_data</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, usart_com.o(i.read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recover_data
</UL>

<P><STRONG><a name="[c5]"></a>read_other_data</STRONG> (Thumb, 198 bytes, Stack size 12 bytes, usart_com.o(i.read_other_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = read_other_data
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_READ_byte
</UL>

<P><STRONG><a name="[c4]"></a>read_plc_tyte</STRONG> (Thumb, 182 bytes, Stack size 12 bytes, usart_com.o(i.read_plc_tyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = read_plc_tyte
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_READ_byte
</UL>

<P><STRONG><a name="[150]"></a>recover_data</STRONG> (Thumb, 142 bytes, Stack size 12 bytes, usart_com.o(i.recover_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = recover_data &rArr; read_data
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[156]"></a>reset_step</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, ladder.o(i.reset_step))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_SUBP
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_ORP
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_ORF
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_MULP
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_MOVP
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_LDP
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_LDF
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_INCP
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_DIVP
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_DECP
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_ANDP
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_ANDF
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_ADDP
</UL>

<P><STRONG><a name="[fc]"></a>rx_data_sum</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, usart_com.o(i.rx_data_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rx_data_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RX_Process
</UL>

<P><STRONG><a name="[155]"></a>set_step</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, ladder.o(i.set_step))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_SUBP
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_ORP
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_ORF
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_MULP
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_MOVP
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_LDP
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_LDF
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_INCP
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_DIVP
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_DECP
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_ANDP
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_ANDF
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_ADDP
</UL>

<P><STRONG><a name="[e3]"></a>setup_HL</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usart_com.o(i.setup_HL))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_switch
</UL>

<P><STRONG><a name="[ba]"></a>setup_LH</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usart_com.o(i.setup_LH))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_OPTION_PROG
</UL>

<P><STRONG><a name="[103]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQR
</UL>

<P><STRONG><a name="[e0]"></a>switch_read_data</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, usart_com.o(i.switch_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = switch_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_switch
</UL>

<P><STRONG><a name="[f8]"></a>timer_disble</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, clk.o(i.timer_disble))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_T
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_T
</UL>

<P><STRONG><a name="[152]"></a>timer_enable</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, clk.o(i.timer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_T_K
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_T_D
</UL>

<P><STRONG><a name="[c6]"></a>write_block</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, usart_com.o(i.write_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = write_block &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;online_write_data
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mov_flash
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_flash_lock
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_WRITE_Parameter
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PC_WRITE_PORG
</UL>

<P><STRONG><a name="[145]"></a>write_data</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usart_com.o(i.write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = write_data &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backup_data
</UL>

<P><STRONG><a name="[119]"></a>x_filter</STRONG> (Thumb, 1072 bytes, Stack size 0 bytes, bsp.o(i.x_filter))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[182]"></a>x_refresh</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, bsp.o(i.x_refresh))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17f]"></a>y_refresh</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, bsp.o(i.y_refresh))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_xy
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQR
</UL>

<P><STRONG><a name="[18e]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[102]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQR
</UL>

<P><STRONG><a name="[1bf]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[18f]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
</UL>

<P><STRONG><a name="[18c]"></a>_dsqrt</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, dsqrt_noumaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[180]"></a>Delay</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[107]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[185]"></a>ANB</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ladder.o(i.ANB))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;other_function
</UL>

<P><STRONG><a name="[d3]"></a>ANI</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ladder.o(i.ANI))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ANI
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_ProComParse
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_ANI_M
</UL>

<P><STRONG><a name="[d7]"></a>BIT_SET</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ladder.o(i.BIT_SET))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BIT_SET
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_ProComParse
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_SET_S
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_SET_M
</UL>

<P><STRONG><a name="[7a]"></a>CALL</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ladder.o(i.CALL))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CALL &rArr; CALL_EX
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_EX
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[7b]"></a>CALL_EX</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ladder.o(i.CALL_EX))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CALL_EX
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;P_MOV
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL
</UL>

<P><STRONG><a name="[7d]"></a>CJ</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ladder.o(i.CJ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CJ
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJ_EX
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[7e]"></a>CJ_EX</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ladder.o(i.CJ_EX))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJ
</UL>

<P><STRONG><a name="[83]"></a>C_given_value_D</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, ladder.o(i.C_given_value_D))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = C_given_value_D &rArr; enable_C_D &rArr; OUT
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_C_D
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_C_D
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operation_C
</UL>

<P><STRONG><a name="[86]"></a>C_given_value_K</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ladder.o(i.C_given_value_K))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = C_given_value_K &rArr; enable_C_K &rArr; OUT
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_C_K
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_C_K
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operation_C
</UL>

<P><STRONG><a name="[90]"></a>DEC</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ladder.o(i.DEC))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DEC &rArr; add_target &rArr; add_assgin_value
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_target
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_DECP
</UL>

<P><STRONG><a name="[a5]"></a>INC</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, ladder.o(i.INC))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = INC &rArr; add_target &rArr; add_assgin_value
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_target
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_INCP
</UL>

<P><STRONG><a name="[18a]"></a>INV</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ladder.o(i.INV))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;other_function
</UL>

<P><STRONG><a name="[a8]"></a>K_M_MOV_D_H</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, ladder.o(i.K_M_MOV_D_H))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = K_M_MOV_D_H &rArr; MOV_K
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOV_K
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
</UL>

<P><STRONG><a name="[d0]"></a>LD</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ladder.o(i.LD))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LD
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_ProComParse
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_LD_M
</UL>

<P><STRONG><a name="[14d]"></a>LDF</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ladder.o(i.LDF))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LDF
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit_value
</UL>

<P><STRONG><a name="[d1]"></a>LDI</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ladder.o(i.LDI))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LDI
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_ProComParse
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_LDI_M
</UL>

<P><STRONG><a name="[a9]"></a>MOV_K</STRONG> (Thumb, 1480 bytes, Stack size 8 bytes, ladder.o(i.MOV_K))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MOV_K
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_M_MOV_D_H
</UL>

<P><STRONG><a name="[13f]"></a>MOV_TO_K_H</STRONG> (Thumb, 2278 bytes, Stack size 0 bytes, ladder.o(i.MOV_TO_K_H))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_target
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_target
</UL>

<P><STRONG><a name="[189]"></a>MPP</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ladder.o(i.MPP))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;other_function
</UL>

<P><STRONG><a name="[187]"></a>MPS</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ladder.o(i.MPS))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;other_function
</UL>

<P><STRONG><a name="[188]"></a>MRD</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ladder.o(i.MRD))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;other_function
</UL>

<P><STRONG><a name="[ac]"></a>NEG</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ladder.o(i.NEG))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = NEG &rArr; add_target &rArr; add_assgin_value
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_target
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[d4]"></a>OR</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ladder.o(i.OR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OR
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_ProComParse
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_OR_M
</UL>

<P><STRONG><a name="[186]"></a>ORB</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ladder.o(i.ORB))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;other_function
</UL>

<P><STRONG><a name="[d5]"></a>ORI</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ladder.o(i.ORI))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ORI
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_ProComParse
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_ORI_M
</UL>

<P><STRONG><a name="[d6]"></a>OUT</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ladder.o(i.OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_ProComParse
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_OUT_S
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_OUT_M
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_T_K
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_T_D
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_C_K
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_C_D
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_T
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_C_K
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_C_D
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_T
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_C
</UL>

<P><STRONG><a name="[7c]"></a>P_MOV</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ladder.o(i.P_MOV))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL_EX
</UL>

<P><STRONG><a name="[f3]"></a>RCL</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ladder.o(i.RCL))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RCL &rArr; mul_target &rArr; div_assign_value
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_target
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[f5]"></a>RCR</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ladder.o(i.RCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RCR &rArr; mul_target &rArr; div_assign_value
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_target
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[f6]"></a>RESET_C</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ladder.o(i.RESET_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RESET_C &rArr; OUT
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_RST_T
</UL>

<P><STRONG><a name="[f7]"></a>RESET_T</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ladder.o(i.RESET_T))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RESET_T &rArr; OUT
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disble
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_RST_T
</UL>

<P><STRONG><a name="[17c]"></a>RET</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ladder.o(i.RET))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[f9]"></a>ROL</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ladder.o(i.ROL))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ROL &rArr; mul_target &rArr; div_assign_value
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_target
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[fa]"></a>ROR</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ladder.o(i.ROR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ROR &rArr; mul_target &rArr; div_assign_value
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_target
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[d8]"></a>RST</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ladder.o(i.RST))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RST
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_ProComParse
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_RST_S
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_RST_M
</UL>

<P><STRONG><a name="[101]"></a>SQR</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ladder.o(i.SQR))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SQR &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_target
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[105]"></a>SWAP</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ladder.o(i.SWAP))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SWAP &rArr; add_target &rArr; add_assgin_value
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_target
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[123]"></a>T_given_value_D</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, ladder.o(i.T_given_value_D))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = T_given_value_D &rArr; enable_T_D &rArr; OUT
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_T_D
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_T
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operation_T
</UL>

<P><STRONG><a name="[120]"></a>T_given_value_K</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ladder.o(i.T_given_value_K))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = T_given_value_K &rArr; enable_T_K &rArr; OUT
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_T_K
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_T
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operation_T
</UL>

<P><STRONG><a name="[13a]"></a>WAND</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ladder.o(i.WAND))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = WAND &rArr; add_target &rArr; add_assgin_value
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_target
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[13b]"></a>WOR</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ladder.o(i.WOR))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = WOR &rArr; add_target &rArr; add_assgin_value
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_target
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[13c]"></a>WXOR</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ladder.o(i.WXOR))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = WXOR &rArr; add_target &rArr; add_assgin_value
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_target
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[13d]"></a>add</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ladder.o(i.add))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = add &rArr; add_target &rArr; add_assgin_value
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_target
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_ADDP
</UL>

<P><STRONG><a name="[13e]"></a>add_assgin_value</STRONG> (Thumb, 290 bytes, Stack size 12 bytes, ladder.o(i.add_assgin_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = add_assgin_value
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_target
</UL>

<P><STRONG><a name="[92]"></a>add_target</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, ladder.o(i.add_target))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = add_target &rArr; add_assgin_value
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_assgin_value
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOV_TO_K_H
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_MOVP
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_MOV
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WXOR
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WOR
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAND
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWAP
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQR
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NEG
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INC
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEC
</UL>

<P><STRONG><a name="[141]"></a>amount</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ladder.o(i.amount))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = amount &rArr; cos_value &rArr; K_M_MOV_D_H &rArr; MOV_K
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[142]"></a>amount_OR</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ladder.o(i.amount_OR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = amount_OR &rArr; cos_value &rArr; K_M_MOV_D_H &rArr; MOV_K
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[143]"></a>amount_and</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ladder.o(i.amount_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = amount_and &rArr; cos_value &rArr; K_M_MOV_D_H &rArr; MOV_K
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[146]"></a>big</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ladder.o(i.big))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = big &rArr; cos_value &rArr; K_M_MOV_D_H &rArr; MOV_K
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[147]"></a>big_OR</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ladder.o(i.big_OR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = big_OR &rArr; cos_value &rArr; K_M_MOV_D_H &rArr; MOV_K
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[148]"></a>big_amount</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ladder.o(i.big_amount))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = big_amount &rArr; cos_value &rArr; K_M_MOV_D_H &rArr; MOV_K
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[149]"></a>big_amount_OR</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ladder.o(i.big_amount_OR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = big_amount_OR &rArr; cos_value &rArr; K_M_MOV_D_H &rArr; MOV_K
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[14a]"></a>big_amount_and</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ladder.o(i.big_amount_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = big_amount_and &rArr; cos_value &rArr; K_M_MOV_D_H &rArr; MOV_K
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[14b]"></a>big_and</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ladder.o(i.big_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = big_and &rArr; cos_value &rArr; K_M_MOV_D_H &rArr; MOV_K
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[14c]"></a>bit_value</STRONG> (Thumb, 472 bytes, Stack size 8 bytes, ladder.o(i.bit_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bit_value &rArr; LDF
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDF
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_ORP
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_ORF
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_LDP
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_LDF
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_ANDP
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_ANDF
</UL>

<P><STRONG><a name="[91]"></a>cos_value</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, ladder.o(i.cos_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cos_value &rArr; K_M_MOV_D_H &rArr; MOV_K
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h_cos_value
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_M_MOV_D_H
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;no_amount_and
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;no_amount_OR
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;no_amount
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;less_and
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;less_amount_and
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;less_amount_OR
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;less_amount
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;less_OR
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;less
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_MOVP
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_MOV
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_and
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_amount_and
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_amount_OR
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_amount
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_OR
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amount_and
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amount_OR
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amount
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WXOR
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WOR
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAND
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWAP
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQR
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROR
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROL
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCR
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCL
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NEG
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INC
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEC
</UL>

<P><STRONG><a name="[85]"></a>disable_C_D</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, ladder.o(i.disable_C_D))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = disable_C_D &rArr; OUT
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_given_value_D
</UL>

<P><STRONG><a name="[88]"></a>disable_C_K</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, ladder.o(i.disable_C_K))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = disable_C_K &rArr; OUT
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_given_value_K
</UL>

<P><STRONG><a name="[122]"></a>disable_T</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ladder.o(i.disable_T))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = disable_T &rArr; OUT
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disble
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_given_value_K
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_given_value_D
</UL>

<P><STRONG><a name="[151]"></a>div</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ladder.o(i.div))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = div &rArr; mul_target &rArr; div_assign_value
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_target
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_DIVP
</UL>

<P><STRONG><a name="[184]"></a>div_assign_value</STRONG> (Thumb, 386 bytes, Stack size 16 bytes, ladder.o(i.div_assign_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = div_assign_value
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_target
</UL>

<P><STRONG><a name="[84]"></a>enable_C_D</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, ladder.o(i.enable_C_D))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = enable_C_D &rArr; OUT
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_given_value_D
</UL>

<P><STRONG><a name="[87]"></a>enable_C_K</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, ladder.o(i.enable_C_K))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = enable_C_K &rArr; OUT
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_given_value_K
</UL>

<P><STRONG><a name="[124]"></a>enable_T_D</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ladder.o(i.enable_T_D))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = enable_T_D &rArr; OUT
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_given_value_D
</UL>

<P><STRONG><a name="[121]"></a>enable_T_K</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, ladder.o(i.enable_T_K))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = enable_T_K &rArr; OUT
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_given_value_K
</UL>

<P><STRONG><a name="[153]"></a>extend_ADDP</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, ladder.o(i.extend_ADDP))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = extend_ADDP &rArr; add &rArr; add_target &rArr; add_assgin_value
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_step
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_step
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[157]"></a>extend_ANDF</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ladder.o(i.extend_ANDF))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = extend_ANDF &rArr; bit_value &rArr; LDF
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_step
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_step
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit_value
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[158]"></a>extend_ANDP</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ladder.o(i.extend_ANDP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = extend_ANDP &rArr; bit_value &rArr; LDF
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_step
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_step
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit_value
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[159]"></a>extend_AND_M</STRONG> (Thumb, 182 bytes, Stack size 4 bytes, ladder.o(i.extend_AND_M))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = extend_AND_M &rArr; AND
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AND
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[15a]"></a>extend_ANI_M</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, ladder.o(i.extend_ANI_M))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = extend_ANI_M &rArr; ANI
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANI
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[15b]"></a>extend_DECP</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, ladder.o(i.extend_DECP))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = extend_DECP &rArr; DEC &rArr; add_target &rArr; add_assgin_value
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_step
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_step
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEC
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[15c]"></a>extend_DIVP</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, ladder.o(i.extend_DIVP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = extend_DIVP &rArr; div &rArr; mul_target &rArr; div_assign_value
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_step
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_step
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[15d]"></a>extend_INCP</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, ladder.o(i.extend_INCP))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = extend_INCP &rArr; INC &rArr; add_target &rArr; add_assgin_value
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_step
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_step
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INC
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[15e]"></a>extend_LDF</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, ladder.o(i.extend_LDF))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = extend_LDF &rArr; bit_value &rArr; LDF
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_step
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_step
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit_value
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[15f]"></a>extend_LDI_M</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, ladder.o(i.extend_LDI_M))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = extend_LDI_M &rArr; LDI
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDI
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[160]"></a>extend_LDP</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, ladder.o(i.extend_LDP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = extend_LDP &rArr; bit_value &rArr; LDF
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_step
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_step
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit_value
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[161]"></a>extend_LD_M</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, ladder.o(i.extend_LD_M))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = extend_LD_M &rArr; LD
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[162]"></a>extend_MOV</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ladder.o(i.extend_MOV))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = extend_MOV &rArr; add_target &rArr; add_assgin_value
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_target
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[163]"></a>extend_MOVP</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, ladder.o(i.extend_MOVP))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = extend_MOVP &rArr; add_target &rArr; add_assgin_value
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_step
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_step
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_target
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[164]"></a>extend_MULP</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, ladder.o(i.extend_MULP))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = extend_MULP &rArr; mul &rArr; mul_target &rArr; div_assign_value
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_step
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_step
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[166]"></a>extend_ORF</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ladder.o(i.extend_ORF))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = extend_ORF &rArr; bit_value &rArr; LDF
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_step
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_step
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit_value
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[167]"></a>extend_ORI_M</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, ladder.o(i.extend_ORI_M))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = extend_ORI_M &rArr; ORI
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ORI
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[168]"></a>extend_ORP</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ladder.o(i.extend_ORP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = extend_ORP &rArr; bit_value &rArr; LDF
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_step
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_step
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit_value
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[169]"></a>extend_OR_M</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, ladder.o(i.extend_OR_M))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = extend_OR_M &rArr; OR
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OR
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[16a]"></a>extend_OUT_M</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, ladder.o(i.extend_OUT_M))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = extend_OUT_M &rArr; OUT
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[16b]"></a>extend_OUT_S</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, ladder.o(i.extend_OUT_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = extend_OUT_S &rArr; OUT
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[16c]"></a>extend_RST_M</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, ladder.o(i.extend_RST_M))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = extend_RST_M &rArr; RST
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[16d]"></a>extend_RST_S</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, ladder.o(i.extend_RST_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = extend_RST_S &rArr; RST
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[16e]"></a>extend_RST_T</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ladder.o(i.extend_RST_T))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = extend_RST_T &rArr; RESET_C &rArr; OUT
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_T
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_C
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[16f]"></a>extend_SET_M</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, ladder.o(i.extend_SET_M))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = extend_SET_M &rArr; BIT_SET
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIT_SET
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[170]"></a>extend_SET_S</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, ladder.o(i.extend_SET_S))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = extend_SET_S &rArr; BIT_SET
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIT_SET
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[171]"></a>extend_SUBP</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, ladder.o(i.extend_SUBP))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = extend_SUBP &rArr; sub &rArr; add_target &rArr; add_assgin_value
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_step
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_step
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[da]"></a>extend_function</STRONG> (Thumb, 1454 bytes, Stack size 8 bytes, ladder.o(i.extend_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = extend_function &rArr; SQR &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;no_amount_and
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;no_amount_OR
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;no_amount
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;less_and
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;less_amount_and
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;less_amount_OR
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;less_amount
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;less_OR
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;less
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_SUBP
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_SET_S
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_SET_M
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_RST_T
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_RST_S
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_RST_M
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_OUT_S
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_OUT_M
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_OR_M
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_ORP
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_ORI_M
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_ORF
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_MULP
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_MOVP
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_MOV
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_LD_M
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_LDP
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_LDI_M
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_LDF
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_INCP
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_DIVP
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_DECP
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_ANI_M
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_AND_M
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_ANDP
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_ANDF
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_ADDP
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_and
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_amount_and
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_amount_OR
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_amount
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big_OR
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;big
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amount_and
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amount_OR
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;amount
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WXOR
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WOR
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAND
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWAP
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SQR
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROR
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROL
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RET
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCR
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCL
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NEG
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INC
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEC
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CJ
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CALL
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_ProComParse
</UL>

<P><STRONG><a name="[14e]"></a>h_cos_value</STRONG> (Thumb, 338 bytes, Stack size 8 bytes, ladder.o(i.h_cos_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = h_cos_value
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
</UL>

<P><STRONG><a name="[173]"></a>less</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ladder.o(i.less))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = less &rArr; cos_value &rArr; K_M_MOV_D_H &rArr; MOV_K
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[179]"></a>less_OR</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ladder.o(i.less_OR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = less_OR &rArr; cos_value &rArr; K_M_MOV_D_H &rArr; MOV_K
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[175]"></a>less_amount</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ladder.o(i.less_amount))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = less_amount &rArr; cos_value &rArr; K_M_MOV_D_H &rArr; MOV_K
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[17b]"></a>less_amount_OR</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ladder.o(i.less_amount_OR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = less_amount_OR &rArr; cos_value &rArr; K_M_MOV_D_H &rArr; MOV_K
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[178]"></a>less_amount_and</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ladder.o(i.less_amount_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = less_amount_and &rArr; cos_value &rArr; K_M_MOV_D_H &rArr; MOV_K
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[176]"></a>less_and</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ladder.o(i.less_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = less_and &rArr; cos_value &rArr; K_M_MOV_D_H &rArr; MOV_K
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[165]"></a>mul</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ladder.o(i.mul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mul &rArr; mul_target &rArr; div_assign_value
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_target
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_MULP
</UL>

<P><STRONG><a name="[f4]"></a>mul_target</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, ladder.o(i.mul_target))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mul_target &rArr; div_assign_value
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div_assign_value
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOV_TO_K_H
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROR
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROL
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCR
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCL
</UL>

<P><STRONG><a name="[174]"></a>no_amount</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ladder.o(i.no_amount))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = no_amount &rArr; cos_value &rArr; K_M_MOV_D_H &rArr; MOV_K
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[17a]"></a>no_amount_OR</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ladder.o(i.no_amount_OR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = no_amount_OR &rArr; cos_value &rArr; K_M_MOV_D_H &rArr; MOV_K
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[177]"></a>no_amount_and</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ladder.o(i.no_amount_and))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = no_amount_and &rArr; cos_value &rArr; K_M_MOV_D_H &rArr; MOV_K
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
</UL>

<P><STRONG><a name="[cf]"></a>operation_C</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ladder.o(i.operation_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = operation_C &rArr; C_given_value_K &rArr; enable_C_K &rArr; OUT
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_given_value_K
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C_given_value_D
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_ProComParse
</UL>

<P><STRONG><a name="[ce]"></a>operation_T</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ladder.o(i.operation_T))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = operation_T &rArr; T_given_value_K &rArr; enable_T_K &rArr; OUT
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_given_value_K
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T_given_value_D
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_ProComParse
</UL>

<P><STRONG><a name="[d9]"></a>other_function</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ladder.o(i.other_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = other_function
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ORB
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRD
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPS
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPP
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INV
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ANB
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLC_ProComParse
</UL>

<P><STRONG><a name="[172]"></a>sub</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ladder.o(i.sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = sub &rArr; add_target &rArr; add_assgin_value
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos_value
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_target
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_function
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_SUBP
</UL>

<P><STRONG><a name="[93]"></a>DataStageIn</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, usb_core.o(i.DataStageIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserToPMABufferCopy
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPTxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;In0_Process
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Setup0
</UL>

<P><STRONG><a name="[97]"></a>DataStageOut</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, usb_core.o(i.DataStageOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DataStageOut &rArr; PMAToUserBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetEPTxCount
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMAToUserBufferCopy
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEPRxAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Out0_Process
</UL>

<P><STRONG><a name="[9a]"></a>Data_Setup0</STRONG> (Thumb, 628 bytes, Stack size 40 bytes, usb_core.o(i.Data_Setup0))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Data_Setup0 &rArr; DataStageIn &rArr; UserToPMABufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataStageIn
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>

<P><STRONG><a name="[b1]"></a>NoData_Setup0</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, usb_core.o(i.NoData_Setup0))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = NoData_Setup0 &rArr; Standard_ClearFeature &rArr; SetEPTxStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetInterface
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetEndPointFeature
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetDeviceFeature
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_SetConfiguration
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_ClearFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup0_Process
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
